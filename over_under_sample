import os
import numpy as np
import pandas as pd
import re
import random
import shutil


class OverUnderSample:
    '''expects one folder with all the '''

    random.seed(4)

    def __init__(self):
        self.imgPATH=''
        self.outdir=''
        self.first_pat='_neg'
        self.sec_pat='_pos'
        self.minority_percent=0.6


    def balance(self):

        files=[file for file in os.listdir(self.imgPATH)]

        #sort the files by pattern
        first_pat_l=[]; sec_pat_l=[]
        for file in files:
            if re.search(self.first_pat,file):
                first_pat_l+=[file]
            if re.search(self.sec_pat,file):
                sec_pat_l+=[file]

        #figure out which pattern is larger
        if len(first_pat_l)>=len(sec_pat_l):
            greater=first_pat_l
            lesser=sec_pat_l
            maj_pat=self.first_pat; min_pat=self.sec_pat
        elif len(first_pat_l)<len(sec_pat_l):
            greater=sec_pat_l
            lesser=first_pat_l
            maj_pat = self.sec_pat;min_pat = self.first_pat


        print("pattern {} has more samples than pattern {}".format(maj_pat.split('_')[1],min_pat.split('_')[1]))
        print("number in pattern {} is {}".format(maj_pat.split('_')[1],len(greater)))
        print("number in pattern {} is {}".format(min_pat.split('_')[1],len(lesser)))
        print("number files is {}".format(len(files)))


        #set up filestructure for saving
        if not os.path.exists(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent))):
            os.mkdir(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent)))
        if not os.path.exists(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent),maj_pat.split('_')[1])):
            os.mkdir(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent),maj_pat.split('_')[1]))
        if not os.path.exists(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent),min_pat.split('_')[1])):
            os.mkdir(os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent),min_pat.split('_')[1]))


        #figure out how many files to balance proportions while keeping total files equal
        #number files
        num_minority_class=int(len(files) * (self.minority_percent))
        num_majority_class=int(len(files) * (1-self.minority_percent))

        print("number needed in minorty class to achieve desired split is {}".format(num_minority_class))
        print("number needed in majority class to achieve desired split is {}".format(num_majority_class))

        class_dict={'lesser':(lesser,num_minority_class,min_pat),
                    'greater':(greater,num_majority_class,maj_pat)}

        #Take subsample of majority class
        for key in class_dict:
            class_name=class_dict[key][0]; num_class=class_dict[key][1]; pat=class_dict[key][2]

            #remove samples
            if len(class_name)>=num_class:
                while len(class_name) > num_class:
                    files_to_remove=random.sample(class_name,2)
                    class_name=list(set(class_name)-set(files_to_remove))

            #oversample
            elif len(class_name)<num_class:
                while len(class_name)<num_class:
                    files_to_add=random.sample(class_name,1)
                    class_name=class_name+files_to_add


            #make copies of majority samples to new class
            count=0
            for file in class_name:
                count+=1
                filename_save=file.split('.jpeg')[0]+'_'+str(''.join(random.sample('0123456789', 5)))+'.jpeg'
                initial_path=os.path.join(self.imgPATH,file)
                final_path=os.path.join(self.outdir,'train'+'_'+'minority_oversampled'+'_'+str(self.minority_percent),pat.split('_')[1],filename_save)
                shutil.copy2(initial_path,final_path)




    def make_out_dir(self,cat1,cat2):
        '''
        looks through all the values in the output directory and makes the correct data structure and makes folderss
        for all necessary folder for pytorch ImageFolder.
        '''

        #define all directories
        states=['train','valid']

        for state in states:
            path_state_dir=os.path.join(self.outpath,state)
            if not os.path.exists(path_state_dir):
                os.mkdir(path_state_dir)
                os.chdir(path_state_dir)
                if not os.path.exists(os.path.join(path_state_dir,cat1)):
                    os.mkdir(os.path.join(path_state_dir,cat1))
                if not os.path.exists(os.path.join(path_state_dir,cat2)):
                    os.mkdir(os.path.join(path_state_dir,cat2))




if __name__=='__main__':
    c=OverUnderSample()
    c.balance()
